name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: ["**"]
  workflow_call:
  workflow_dispatch:
  
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Create default Conan profile
        run: conan profile detect

      - name: Build & install up-cpp
        shell: bash
        run: |
          conan source .
          conan build . --build=missing -o build_testing=True

      - name: Run the test
        shell: bash
        run: |
          cd build/Release
          ctest

  local-package:
    name: Local Package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Create default Conan profile
        run: conan profile detect

      - name: Create up-cpp Conan package
        shell: bash
        run: |
          conan create . --build=missing          

  cci-package:
    name: Conan Center Index Package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Create default Conan profile
        run: conan profile detect

      - name: Create up-cpp Conan package for Conan Center Index
        shell: bash
        run: |
          cd conan-recipes/cci/all
          conan create . --build=missing --version 0.1.2-dev        

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: [test, local-package, cci-package]
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'